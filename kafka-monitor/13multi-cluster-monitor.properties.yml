apiVersion: v1
data:
  multi-cluster-monitor.properties: |
    # Copyright 2016 LinkedIn Corp. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
    # file except in compliance with the License. You may obtain a copy of the License at
    #
    #    http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
    # an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

    # This properties file specifies an example configure to monitor a pipeline of Kafka clusters.
    # User probably needs to change zookeeper.connect and bootstrap.servers to point to respective clusters.
    # More clusters can be added in the map for "topic.management.config.per.cluster" to reference
    # each cluster in the pipeline. The "produce.service.props" should use the first cluster and
    # the "consume.service.props" should use the last cluster in the pipeline.

    {
      "multi-cluster-monitor": {
        "class.name": "com.linkedin.kmf.apps.MultiClusterMonitor",
        "topic": "kafka-monitor-1",

        "produce.service.props": {
          "zookeeper.connect": "zookeeper.kafka-source.svc.cluster.local:2181",
          "bootstrap.servers": "broker.kafka-source.svc.cluster.local:9092",
          "produce.record.delay.ms": 1,
          "produce.producer.props": {
            "client.id": "kafka-monitor-client-id",
            "compression.codec": "lz4"
          }
        },

        "consume.service.props": {
          "zookeeper.connect": "zookeeper.kafka-destination.svc.cluster.local:2181",
          "bootstrap.servers": "broker.kafka-destination.svc.cluster.local:9092",
          "consume.latency.sla.ms": "20000",
          "consume.consumer.props": {
            "group.id": "kafka-monitor-group-id"
          }
        },

        "topic.management.props.per.cluster" : {
          "first-cluster" : {
            "zookeeper.connect": "zookeeper.kafka-source.svc.cluster.local:2181",
            "topic-management.topicCreationEnabled": true,
            "topic-management.replicationFactor" : 1,
            "topic-management.partitionsToBrokersRatio" : 2.0,
            "topic-management.rebalance.interval.ms" : 600000,
            "topic-management.topicFactory.props": {
            },
            "topic-management.topic.props": {
              "retention.ms": "3600000"
            }
          },

          "last-cluster" : {
            "zookeeper.connect": "zookeeper.kafka-destination.svc.cluster.local:2181",
            "topic-management.topicCreationEnabled": true,
            "topic-management.replicationFactor" : 1,
            "topic-management.partitionsToBrokersRatio" : 2.0,
            "topic-management.rebalance.interval.ms" : 600000,
            "topic-management.topicFactory.props": {
            },
            "topic-management.topic.props": {
              "retention.ms": "3600000"
            }
          }
        }

      },

      "reporter-service": {
        "class.name": "com.linkedin.kmf.services.GraphiteMetricsReporterService",
        "report.interval.sec": 1,
        "report.graphite.host": "prometheus-graphite-exporter.monitoring.svc.cluster.local",
        "report.graphite.port": "9109",
        "report.graphite.prefix": "km",
        "report.metrics.list": [
          "kmf.services:type=produce-service,name=*:produce-availability-avg",
          "kmf.services:type=consume-service,name=*:consume-availability-avg",
          "kmf.services:type=produce-service,name=*:records-produced-total",
          "kmf.services:type=consume-service,name=*:records-consumed-total",
          "kmf.services:type=consume-service,name=*:records-lost-total",
          "kmf.services:type=consume-service,name=*:records-duplicated-total",
          "kmf.services:type=consume-service,name=*:records-delay-ms-avg",
          "kmf.services:type=produce-service,name=*:records-produced-rate",
          "kmf.services:type=produce-service,name=*:produce-error-rate",
          "kmf.services:type=consume-service,name=*:consume-error-rate"
        ]
      },

      "jetty-service": {
        "class.name": "com.linkedin.kmf.services.JettyService",
        "jetty.port": 8000
      },

      "jolokia-service": {
        "class.name": "com.linkedin.kmf.services.JolokiaService"
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: multi-cluster-monitor-volume
  namespace: kafka-monitor
